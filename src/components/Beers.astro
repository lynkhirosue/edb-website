---
import '../styles/beers.css';

export interface Props {
  className?: string;
}

const { className = "" } = Astro.props;

// LES 5 VRAIES BIÈRES COMPLÈTES
const createdBeers = [
  {
    id: 'specialty-fruit-beer',
    name: 'Specialty Fruit Beer',
    description: 'Ale houblonnée avec ajout de nectarines à la fermentation.',
    tags: ['Nectarine', 'Houblonnée', 'Fruitée'],
    abv: '6,2% alc.'
  },
  {
    id: 'imperial-stout',
    name: 'Imperial Stout',
    description: 'Ale noire, torréfiée, touche de cacao, corps velouté, finale sèche.',
    tags: ['Torréfiée', 'Cacao', 'Corps velouté'],
    abv: '9,3% alc.'
  },
  {
    id: 'saison',
    name: 'Saison',
    description: 'Ale blonde sèche, épicée, levure expressive, finale désaltérante.',
    tags: ['Épicée', 'Levure', 'Sèche'],
    abv: '5,9% alc.'
  },
  {
    id: 'czech-pale-lager',
    name: 'Czech Pale Lager',
    description: 'Lager légère, avec un délicieux goût de céréale.',
    tags: ['Lager', 'Légère', 'Céréale'],
    abv: '3,9% alc.'
  },
  {
    id: 'american-pale-ale',
    name: 'American Pale Ale',
    description: 'Pale Ale, notes florales et fruitées, amertume douce.',
    tags: ['Fruitée', 'Florale', 'Amertume douce'],
    abv: '5,2% alc.'
  }
];
---

<section id="beers" class="beers-section">
  <div class="beers-container">
    
    <h2 class="beers-title">On a déjà brassé</h2>
    <p class="beers-subtitle">
      Nos créations artisanales réalisées avec passion. 
      Chaque bière raconte une histoire unique de notre savoir-faire.
    </p>

    <div class="beers-carousel" id="beersCarousel">
      <!-- FLÈCHE GAUCHE -->
      <button class="big-arrow prev-arrow" id="prevBtn">
        <svg width="40" height="40" viewBox="0 0 24 24" fill="none">
          <path d="M15 18l-6-6 6-6" stroke="currentColor" stroke-width="3"/>
        </svg>
      </button>

      <!-- CONTAINER 5 CARDS PLUS PETITES -->
      <div class="cards-wrapper">
        <div class="cards-slider" id="cardsSlider">
          {createdBeers.map((beer, index) => (
            <div class="beer-card">
              <h3 class="beer-name">{beer.name}</h3>
              <p class="beer-description">{beer.description}</p>
              
              <div class="beer-tags">
                {beer.tags.map((tag) => (
                  <span class="beer-tag">{tag}</span>
                ))}
              </div>
              
              <div class="beer-footer">
                <span class="beer-abv">{beer.abv}</span>
                <button class="inspire-btn">S'en inspirer</button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- FLÈCHE DROITE -->
      <button class="big-arrow next-arrow" id="nextBtn">
        <svg width="40" height="40" viewBox="0 0 24 24" fill="none">
          <path d="M9 18l6-6-6-6" stroke="currentColor" stroke-width="3"/>
        </svg>
      </button>
    </div>
    
    <!-- POINTS RONDS -->
    <div class="pagination-dots">
      <span class="round-dot active" data-slide="0"></span>
      <span class="round-dot" data-slide="1"></span>
    </div>

  </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');
  const slider = document.getElementById('cardsSlider');
  const carousel = document.getElementById('beersCarousel');
  const dots = document.querySelectorAll('.round-dot');
  
  let currentSlide = 0;
  const totalSlides = 2;
  
  function updateCarousel() {
    // Page 1: bières 1,2,3 | Page 2: bières 4,5
    const translateX = currentSlide === 0 ? '0%' : '-60%';
    slider.style.transform = `translateX(${translateX})`;
    
    // Update dots
    dots.forEach((dot, index) => {
      if (index === currentSlide) {
        dot.classList.add('active');
      } else {
        dot.classList.remove('active');
      }
    });
    
    // Update arrows
    if (currentSlide === 0) {
      prevBtn.style.opacity = '0.3';
      prevBtn.disabled = true;
    } else {
      prevBtn.style.opacity = '1';
      prevBtn.disabled = false;
    }
    
    if (currentSlide === totalSlides - 1) {
      nextBtn.style.opacity = '0.3';
      nextBtn.disabled = true;
    } else {
      nextBtn.style.opacity = '1';
      nextBtn.disabled = false;
    }
  }
  
  function goToSlide(slideIndex) {
    currentSlide = Math.max(0, Math.min(slideIndex, totalSlides - 1));
    updateCarousel();
  }
  
  function nextSlide() {
    if (currentSlide < totalSlides - 1) {
      currentSlide++;
      updateCarousel();
    }
  }
  
  function prevSlide() {
    if (currentSlide > 0) {
      currentSlide--;
      updateCarousel();
    }
  }
  
  // Event listeners flèches
  prevBtn.addEventListener('click', () => {
    prevSlide();
  });
  
  nextBtn.addEventListener('click', () => {
    nextSlide();
  });
  
  // Event listeners dots
  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      goToSlide(index);
    });
  });
  
  // CONTRÔLE MOLETTE SOURIS SEULEMENT (pas d'auto-scroll)
  let scrollTimeout = null;
  
  carousel.addEventListener('wheel', (e) => {
    e.preventDefault();
    
    // Débounce pour éviter les scroll trop rapides
    if (scrollTimeout) return;
    
    scrollTimeout = setTimeout(() => {
      scrollTimeout = null;
    }, 300);
    
    // Détection direction scroll
    if (e.deltaY > 0 || e.deltaX > 0) {
      nextSlide();
    } else if (e.deltaY < 0 || e.deltaX < 0) {
      prevSlide();
    }
  }, { passive: false });
  
  // Event listeners boutons "S'en inspirer"
  document.querySelectorAll('.inspire-btn').forEach(button => {
    button.addEventListener('click', (e) => {
      const card = e.target.closest('.beer-card');
      const beerName = card.querySelector('.beer-name').textContent;
      
      // Animation du bouton
      button.style.transform = 'scale(0.95)';
      setTimeout(() => {
        button.style.transform = '';
      }, 150);
      
      // Scroll vers contact
      const contactSection = document.querySelector('#contact');
      if (contactSection) {
        contactSection.scrollIntoView({ behavior: 'smooth' });
        
        setTimeout(() => {
          const messageField = document.querySelector('#message');
          if (messageField) {
            messageField.value = `Bonjour ! Je suis intéressé(e) par une bière inspirée de votre "${beerName}". Pouvons-nous en discuter ?`;
            messageField.focus();
          }
        }, 1000);
      }
    });
  });
  
  // Initialisation
  updateCarousel();
});
</script>
