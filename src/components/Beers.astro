---
import '../styles/beers.css';

export interface Props {
  className?: string;
}

const { className = "" } = Astro.props;

const createdBeers = [
  {
    id: 'specialty-fruit-beer',
    name: 'Jess Fruity Pale Ale',
    type: 'Specialty Fruit Beer',
    description: 'Ale houblonn√©e avec ajout de nectarines √† la fermentation.',
    tags: ['Nectarine', 'Houblonn√©e', 'Fruit√©e'],
    abv: '6,2% alc.',
    hasSpecialEffect: false,
    hasGhosts: false
  },
  {
    id: 'imperial-stout',
    name: 'R√©confort noir',
    type: 'Imperial Stout',
    description: 'Ale noire, torr√©fi√©e, touche de cacao, corps velout√©, finale s√®che.',
    tags: ['Torr√©fi√©e', 'Cacao', 'Corps velout√©'],
    abv: '9,3% alc.',
    hasSpecialEffect: false,
    hasGhosts: false
  },
  {
    id: 'saison',
    name: 'Bi√®re d\'√©curie',
    type: 'Saison',
    description: 'Ale blonde s√®che, √©pic√©e, levure expressive, finale d√©salt√©rante.',
    tags: ['√âpic√©e', 'Levure', 'S√®che'],
    abv: '5,9% alc.',
    hasSpecialEffect: false,
    hasGhosts: false
  },
  {
    id: 'czech-pale-lager',
    name: 'Bol de c√©r√©ales',
    type: 'Czech Pale Lager',
    description: 'Lager l√©g√®re, avec un d√©licieux go√ªt de c√©r√©ale.',
    tags: ['Lager', 'L√©g√®re', 'C√©r√©ale'],
    abv: '3,9% alc.',
    hasSpecialEffect: false,
    hasGhosts: false
  },
  {
    id: 'american-pale-ale',
    name: 'Idyllwild',
    type: 'American Pale Ale',
    description: 'Pale Ale, notes florales et fruit√©es, amertume douce.',
    tags: ['Fruit√©e', 'Florale', 'Amertume douce'],
    abv: '5,2% alc.',
    hasSpecialEffect: true,
    hasGhosts: false,
    backgroundImage: '/APA.jpg'
  },
  {
    id: 'autumn-seasonal-beer',
    name: 'Fallen on Fall',
    type: 'Autumn Seasonal Beer',
    description: 'Ale l√©g√®rement ambr√©e, malt√©e, aux √©pices d\'automne.',
    tags: ['Ambr√©e', '√âpic√©', 'Malt√©e'],
    abv: '4,5% alc.',
    hasSpecialEffect: true,
    hasGhosts: true,
    backgroundImage: '/fallen-on-fall.png'
  }
];
---

<section id="beers" class={className}>
  <div class="beers-container">
    <h2 class="beers-title">On a d√©j√† brass√©</h2>
    <p class="beers-subtitle">
      Nos cr√©ations artisanales r√©alis√©es avec passion. 
      Chaque bi√®re raconte une histoire unique de notre savoir-faire.
    </p>

    <div class="beers-grid">
      {createdBeers.map((beer) => (
        <div 
          class={`beer-card ${beer.hasSpecialEffect ? 'beer-card-special' : ''} ${beer.hasGhosts ? 'beer-card-ghosts' : ''}`}
          data-beer-id={beer.id}
        >
          {beer.hasGhosts && (
            <div class="halloween-ghosts" id={`ghosts-${beer.id}`}>
              <div class="ghost ghost-1">üëª</div>
              <div class="ghost ghost-2">üëª</div>
              <div class="ghost ghost-3">üëª</div>
            </div>
          )}

          {beer.hasSpecialEffect && beer.backgroundImage && (
            <div 
              class="beer-background-image" 
              style={`background-image: url('${beer.backgroundImage}')`}
            ></div>
          )}
          
          <div class="beer-content">
            <h3 class="beer-name">{beer.name}</h3>
            <h6 class="beer-type">{beer.type}</h6>
            <p class="beer-description">{beer.description}</p>
            
            <div class="beer-tags">
              {beer.tags.map((tag) => (
                <span class="beer-tag">{tag}</span>
              ))}
            </div>
            
            <div class="beer-footer">
              <span class="beer-abv">{beer.abv}</span>
              <button class="inspire-btn">S'en inspirer</button>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', () => {
  let hasBeenHovered = false;
  
  const ghostCard = document.querySelector('.beer-card-ghosts') as HTMLElement | null;
  
  if (ghostCard) {
    const ghostsContainer = ghostCard.querySelector('.halloween-ghosts') as HTMLElement | null;
    
    if (ghostsContainer) {
      ghostCard.addEventListener('mouseenter', () => {
        if (!hasBeenHovered) {
          hasBeenHovered = true;
          ghostsContainer.classList.add('ghosts-active');
          
          setTimeout(() => {
            ghostsContainer.style.display = 'none';
          }, 3000);
        }
      });
    }
  }
  
  document.querySelectorAll<HTMLButtonElement>('.inspire-btn').forEach(button => {
    button.addEventListener('click', (e: Event) => {
      const target = e.currentTarget as HTMLButtonElement;
      const card = target.closest('.beer-card') as HTMLElement | null;
      const beerNameEl = card?.querySelector('.beer-name');
      const beerName = beerNameEl?.textContent || '';
      
      target.style.transform = 'scale(0.95)';
      setTimeout(() => {
        target.style.transform = '';
      }, 150);
      
      const contactSection = document.querySelector('#contact') as HTMLElement | null;
      if (contactSection) {
        contactSection.scrollIntoView({ behavior: 'smooth' });
        
        setTimeout(() => {
          const messageField = document.querySelector('#message') as HTMLTextAreaElement | null;
          if (messageField) {
            messageField.value = `Bonjour ! Je suis int√©ress√©(e) par une bi√®re inspir√©e de votre "${beerName}". Pouvons-nous en discuter ?`;
            messageField.focus();
          }
        }, 1000);
      }
    });
  });
});
</script>
