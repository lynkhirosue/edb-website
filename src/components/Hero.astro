---
import '../styles/hero.css';

export interface Props {
  className?: string;
}

const { className = "" } = Astro.props;

// Contenu du hero
const heroContent = {
  title: "L'École du Bélier",
  subtitle: "Femto-brasserie artisanale en Nouvelle-Aquitaine",
  description: "Petits brassins – jamais plus de 100L par lot ou en stock",
  cta: "Demander un Devis"
};

// Statistiques à mettre en valeur
const heroStats = [
  { number: "< 100L", label: "Par brassin max" },
  { number: "2-8", label: "Semaines de délai" },
  { number: "5 Gal", label: "Fûts standard" }
];
---

<section 
  id="hero" 
  class={`hero-section ${className}`} 
  role="banner" 
  aria-labelledby="hero-title"
>
  <!-- Image de fond parallax -->
  <div class="hero-image-container" aria-hidden="true">
    <div class="hero-image"></div>
    <div class="hero-overlay"></div>
  </div>
  
  <!-- Contenu principal -->
  <div class="hero-content">
    <div class="hero-text">
      <h1 id="hero-title" class="hero-title">
        {heroContent.title}
      </h1>
      
      <p class="hero-subtitle">
        {heroContent.subtitle}
      </p>
      
      <p class="hero-description">
        {heroContent.description}
      </p>
      
      <!-- CTA Principal Unique -->
      <div class="hero-actions">
        <a href="#contact" class="hero-cta primary">
          <span>{heroContent.cta}</span>
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
            <path d="M8 1l7 7-7 7M15 8H1" stroke="currentColor" stroke-width="2"/>
          </svg>
        </a>
      </div>
    </div>
    
    <!-- Statistiques -->
    <div class="hero-stats">
      {heroStats.map((stat, index) => (
        <div 
          class="hero-stat"
          style={`--stat-index: ${index}`}
        >
          <div class="stat-number">{stat.number}</div>
          <div class="stat-label">{stat.label}</div>
        </div>
      ))}
    </div>
  </div>
  
  <!-- Indicateur de scroll -->
  <div class="scroll-indicator" aria-hidden="true">
    <span class="scroll-text">Découvrir</span>
    <div class="scroll-arrow">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
        <path d="M12 5v14M5 12l7 7 7-7" stroke="currentColor" stroke-width="2"/>
      </svg>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const heroImage = document.querySelector('.hero-image');
    const heroContent = document.querySelector('.hero-content');
    const scrollIndicator = document.querySelector('.scroll-indicator');
    
    // Parallax effect optimisé
    let ticking = false;
    
    function updateParallax() {
      const scrolled = window.scrollY;
      const viewportHeight = window.innerHeight;
      const heroHeight = document.querySelector('.hero-section').offsetHeight;
      
      // Limiter l'effet parallax à la hauteur du hero
      if (scrolled <= heroHeight) {
        const parallaxSpeed = 0.5;
        const translateY = scrolled * parallaxSpeed;
        
        if (heroImage) {
          heroImage.style.transform = `translate3d(0, ${translateY}px, 0)`;
        }
        
        // Effet fade sur le contenu
        const opacity = Math.max(0, 1 - (scrolled / viewportHeight) * 1.5);
        if (heroContent) {
          heroContent.style.opacity = opacity;
          heroContent.style.transform = `translateY(${scrolled * 0.2}px)`;
        }
        
        // Masquer scroll indicator
        if (scrollIndicator) {
          scrollIndicator.style.opacity = Math.max(0, 1 - scrolled / 300);
        }
      }
      
      ticking = false;
    }
    
    function requestParallaxUpdate() {
      if (!ticking) {
        requestAnimationFrame(updateParallax);
        ticking = true;
      }
    }
    
    // Event listeners
    window.addEventListener('scroll', requestParallaxUpdate, { passive: true });
    window.addEventListener('resize', requestParallaxUpdate, { passive: true });
    
    // Smooth scroll pour le CTA
    document.querySelector('.hero-cta')?.addEventListener('click', (e) => {
      e.preventDefault();
      const target = document.querySelector('#contact');
      if (target) {
        target.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    });
    
    // Animation du scroll indicator
    if (scrollIndicator) {
      scrollIndicator.addEventListener('click', () => {
        const aboutSection = document.querySelector('#about');
        if (aboutSection) {
          aboutSection.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    }
    
    // Initialisation
    updateParallax();
    
    // Animation d'entrée des éléments
    setTimeout(() => {
      document.querySelector('.hero-title')?.classList.add('animate-in');
      setTimeout(() => {
        document.querySelector('.hero-subtitle')?.classList.add('animate-in');
      }, 200);
      setTimeout(() => {
        document.querySelector('.hero-description')?.classList.add('animate-in');
      }, 400);
      setTimeout(() => {
        document.querySelector('.hero-actions')?.classList.add('animate-in');
      }, 600);
      setTimeout(() => {
        document.querySelector('.hero-stats')?.classList.add('animate-in');
      }, 800);
      setTimeout(() => {
        scrollIndicator?.classList.add('animate-in');
      }, 1000);
    }, 300);
  });
</script>
